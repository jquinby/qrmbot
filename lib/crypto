#!/usr/bin/perl -w

# substantially hustled from the btc code written by:
# 2-clause BSD license.
# Copyright 2018 /u/molo1134. All rights reserved.
#
# Requires an API key from AlphaVantage. Place into your
# $HOME/.alphavantage as follows:
#
# $apikey = "1234567890ABCDEF";
#
# NB: some things are in here, I assume, to make this
# script play well with eggdrop and other IRC-related
# stuff.

use strict;
use warnings;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use Math::Round;
use URI::Escape;

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

@ARGV=split(' ', join(' ',@ARGV));

our $apikey = undef;

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq 'eggdrop';

if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  if ($username eq 'eggdrop') {
    print "usage: !crypto <symbol>\n";
  } else {
    print "usage: $0 <symbol>\n";
  }
  exit $exitnonzeroonerror;
}

my $apikeyfile = $ENV{'HOME'} . "/.alphavantage";
if (-e ($apikeyfile)) {
  require($apikeyfile);
} else {
  die "error: unable to read file $apikeyfile"
}
die "error: no API key set" unless defined($apikey);

my $quote = $ARGV[0];

# The AlphaVantage API outputs the following fields for point-in-time exchange rates
#
# JSON:
#
#{
#    "Realtime Currency Exchange Rate": {
#.        "1. From_Currency Code": "BTC",
#.        "2. From_Currency Name": "Bitcoin",
#        "3. To_Currency Code": "CNY",
#        "4. To_Currency Name": "Chinese Yuan",
#        "5. Exchange Rate": "23332.90000000",
#        "6. Last Refreshed": "2018-12-13 22:23:49",
#        "7. Time Zone": "UTC"
# 	}
#}


#
# Select via the datatype key/value pair in the URL (cvs or json)
#
# see https://www.alphavantage.co/documentation/ for more info.

#my $url = "https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=$quote&apikey=$apikey&datatype=csv";
my $url = "https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=$quote&to_currency=USD&apikey=$apikey&datatype=csv";

my ($ticker, $open, $price, $vol, $chg, $pct);

open(HTTP, '-|', "curl --max-time 10 -s -k -L '$url'");
binmode(HTTP, ":utf8");
while (<HTTP>) {
	chomp; chomp; # // CRLF
	s/\r//g;
	next if $. < 2; # this skips the first line of CSV headers

	($ticker, $open, undef, undef, $price, $vol, undef, undef, $chg, $pct) = split(',', $_);
}
close(HTTP);

if (not defined($ticker) or not defined($pct)) {

	my $encquote = uri_escape($quote);
	my $url = "https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=$encquote&apikey=$apikey&datatype=csv";
	my $found = 0;

	open(HTTP, '-|', "curl --max-time 10 -s -k -L '$url'");
	binmode(HTTP, ":utf8");
	while (<HTTP>) {
		next if m/^symbol,/;
		my ($symb,$name,$type,$reg) = split(',');
		print(bold($symb), ": $name - $type, $reg; ");
		$found = 1;
	}
	print "\n" if $found;

	if (not $found) {
		print "no data returned: $quote\n";
	}
	exit $exitnonzeroonerror;
}

my $trend = 1;
$trend = 0 if defined($pct) and $pct =~ m/-/;

my $trendsymbol;
$trendsymbol = green("↑") if $trend > 0;
$trendsymbol = red("↓") if $trend <= 0;

# the little circles look cool, too
#$trend = green("●");
#$trend = red("●") if $info[9] =~ /-/;

# lop off some trailing 0s
$price =~ s/(\.[0-9]*?[1-9]?)0+$/$1/;
$price =~ s/\.$//;
$open  =~ s/(\.[0-9]*?[1-9]?)0+$/$1/;
$open  =~ s/\.$//;
$chg   =~ s/(\.[0-9]*?[1-9]?)0+$/$1/;
$chg   =~ s/\.$//;

$pct =~ s/%//;
$pct = round($pct * 10) / 10;

$price = commify($price);
$open = commify($open);
$chg = commify($chg);
$vol = commify($vol);

print bold($ticker), " ", "$trendsymbol$price ";

print "+$chg (" if $trend;
print "$chg (" if not $trend;

print green("+$pct") if $trend;
print red($pct) if not $trend;

print "%) open: $open volume: $vol\n";

sub commify {
  my $num = shift;
  my ($whole, $frac);
  if ($num =~ /\./) {
    ($whole, $frac) = split(/\./, $num, 2);
    $num = $whole;
  }
  $num =~ s/(\d)(?=(\d{3})+(\D|$|\.\d*))/$1\,/g;
  $num = "$num.$frac" if defined($frac);
  return $num;
}
